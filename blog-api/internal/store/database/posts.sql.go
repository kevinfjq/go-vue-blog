// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    user_id,
    title,
    content
) VALUES ($1, $2, $3) RETURNING id, user_id, title, content, created_at, updated_at, likes_count
`

type CreatePostParams struct {
	UserID  int64       `json:"user_id"`
	Title   string      `json:"title"`
	Content pgtype.Text `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.UserID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
	)
	return i, err
}

const decrementPostLikesCount = `-- name: DecrementPostLikesCount :one
UPDATE posts SET likes_count = GREATEST(0, likes_count - 1) WHERE id = $1 RETURNING id, user_id, title, content, created_at, updated_at, likes_count
`

func (q *Queries) DecrementPostLikesCount(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, decrementPostLikesCount, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM  posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
	)
	return i, err
}

const incrementPostLikesCount = `-- name: IncrementPostLikesCount :one
UPDATE posts SET likes_count = likes_count + 1 WHERE id = $1 RETURNING id, user_id, title, content, created_at, updated_at, likes_count
`

func (q *Queries) IncrementPostLikesCount(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, incrementPostLikesCount, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
	)
	return i, err
}

const listPostsByUserIdOrderByCreatedAtAsc = `-- name: ListPostsByUserIdOrderByCreatedAtAsc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts WHERE user_id = $1 ORDER BY created_at
`

func (q *Queries) ListPostsByUserIdOrderByCreatedAtAsc(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByUserIdOrderByCreatedAtAsc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUserIdOrderByCreatedAtDesc = `-- name: ListPostsByUserIdOrderByCreatedAtDesc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts WHERE user_id = $1 ORDER BY created_at
`

func (q *Queries) ListPostsByUserIdOrderByCreatedAtDesc(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByUserIdOrderByCreatedAtDesc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUserIdOrderByLikesAsc = `-- name: ListPostsByUserIdOrderByLikesAsc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts WHERE user_id = $1 ORDER BY likes_count, created_at DESC
`

func (q *Queries) ListPostsByUserIdOrderByLikesAsc(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByUserIdOrderByLikesAsc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUserIdOrderByLikesDesc = `-- name: ListPostsByUserIdOrderByLikesDesc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts WHERE user_id = $1 ORDER BY likes_count DESC, created_at DESC
`

func (q *Queries) ListPostsByUserIdOrderByLikesDesc(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsByUserIdOrderByLikesDesc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsOrderByCreatedAtAsc = `-- name: ListPostsOrderByCreatedAtAsc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts ORDER BY created_at  LIMIT $1 OFFSET $2
`

type ListPostsOrderByCreatedAtAscParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPostsOrderByCreatedAtAsc(ctx context.Context, arg ListPostsOrderByCreatedAtAscParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsOrderByCreatedAtAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsOrderByCreatedAtDesc = `-- name: ListPostsOrderByCreatedAtDesc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListPostsOrderByCreatedAtDescParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPostsOrderByCreatedAtDesc(ctx context.Context, arg ListPostsOrderByCreatedAtDescParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsOrderByCreatedAtDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsOrderByLikesAtAsc = `-- name: ListPostsOrderByLikesAtAsc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts ORDER BY likes_count, created_at DESC LIMIT $1 OFFSET $2
`

type ListPostsOrderByLikesAtAscParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPostsOrderByLikesAtAsc(ctx context.Context, arg ListPostsOrderByLikesAtAscParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsOrderByLikesAtAsc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsOrderByLikesAtDesc = `-- name: ListPostsOrderByLikesAtDesc :many
SELECT id, user_id, title, content, created_at, updated_at, likes_count FROM posts ORDER BY likes_count DESC, created_at DESC LIMIT $1 OFFSET $2
`

type ListPostsOrderByLikesAtDescParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPostsOrderByLikesAtDesc(ctx context.Context, arg ListPostsOrderByLikesAtDescParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, listPostsOrderByLikesAtDesc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET content = $2, updated_at = NOW() WHERE id = $1 RETURNING id, user_id, title, content, created_at, updated_at, likes_count
`

type UpdatePostParams struct {
	ID      int64       `json:"id"`
	Content pgtype.Text `json:"content"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.ID, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
	)
	return i, err
}
