// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: likes.sql

package database

import (
	"context"
)

const countLikesForTarget = `-- name: CountLikesForTarget :one
SELECT COUNT(*) FROM userlikes WHERE target_id = $1 AND target_type = $2
`

type CountLikesForTargetParams struct {
	TargetID   int64  `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (q *Queries) CountLikesForTarget(ctx context.Context, arg CountLikesForTargetParams) (int64, error) {
	row := q.db.QueryRow(ctx, countLikesForTarget, arg.TargetID, arg.TargetType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLike = `-- name: CreateLike :one
INSERT INTO userlikes (
    user_id,
    target_id,
    target_type
) VALUES ($1, $2, $3) RETURNING user_id, target_id, target_type, created_at
`

type CreateLikeParams struct {
	UserID     int64  `json:"user_id"`
	TargetID   int64  `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Userlike, error) {
	row := q.db.QueryRow(ctx, createLike, arg.UserID, arg.TargetID, arg.TargetType)
	var i Userlike
	err := row.Scan(
		&i.UserID,
		&i.TargetID,
		&i.TargetType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM userlikes WHERE  user_id = $1 AND target_id = $2 AND target_type = $3
`

type DeleteLikeParams struct {
	UserID     int64  `json:"user_id"`
	TargetID   int64  `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.db.Exec(ctx, deleteLike, arg.UserID, arg.TargetID, arg.TargetType)
	return err
}

const getLike = `-- name: GetLike :one
SELECT user_id, target_id, target_type, created_at FROM userlikes WHERE user_id = $1 AND target_id = $2 AND target_type = $3 LIMIT 1
`

type GetLikeParams struct {
	UserID     int64  `json:"user_id"`
	TargetID   int64  `json:"target_id"`
	TargetType string `json:"target_type"`
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (Userlike, error) {
	row := q.db.QueryRow(ctx, getLike, arg.UserID, arg.TargetID, arg.TargetType)
	var i Userlike
	err := row.Scan(
		&i.UserID,
		&i.TargetID,
		&i.TargetType,
		&i.CreatedAt,
	)
	return i, err
}

const listUserLikesByType = `-- name: ListUserLikesByType :many
SELECT user_id, target_id, target_type, created_at FROM userlikes WHERE user_id = $1 AND target_type = $2 ORDER BY created_at DESC
`

type ListUserLikesByTypeParams struct {
	UserID     int64  `json:"user_id"`
	TargetType string `json:"target_type"`
}

func (q *Queries) ListUserLikesByType(ctx context.Context, arg ListUserLikesByTypeParams) ([]Userlike, error) {
	rows, err := q.db.Query(ctx, listUserLikesByType, arg.UserID, arg.TargetType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Userlike
	for rows.Next() {
		var i Userlike
		if err := rows.Scan(
			&i.UserID,
			&i.TargetID,
			&i.TargetType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
